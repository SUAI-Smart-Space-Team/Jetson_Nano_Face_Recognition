{"ast":null,"code":"import dbConnect from '../../utils/dbConnect';\nimport User from '../../models/User';\nimport Image from '../../models/Image';\nexport default async function handler(req, res) {\n  const {\n    method\n  } = req;\n  await dbConnect();\n\n  switch (method) {\n    case 'GET':\n      try {\n        const users = await User.find({}).populate('images'); // console.log(users.iamges)\n\n        res.status(200).json({\n          success: true,\n          data: users\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'POST':\n      try {\n        const user = await User.findOneAndUpdate({\n          name: req.body.name\n        }, {\n          \"$addToSet\": {\n            \"images\": req.body.images\n          }\n        }, {\n          new: true,\n          upsert: true\n        });\n        req.body.images.map(async id => {\n          await Image.findByIdAndUpdate(id, {\n            user: user._id\n          });\n        });\n        res.status(201).json({\n          success: true,\n          data: user\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'PUT':\n      try {\n        console.log(req.body);\n        const user = await User.findByIdAndUpdate(req.body.id, {\n          name: req.body.name\n        }, (err, doc) => console.log(doc));\n\n        if (!user) {\n          return res.status(400).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          success: true,\n          data: user\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'DELETE':\n      try {\n        const deleteUser = await User.findByIdAndRemove(req.body).populate('images'); // .exec((err, user) => {\n        //     user.images.map(async (image) => {\n        //         await Image.findByIdAndRemove(image._id)\n        //     })\n        // })\n\n        if (!deleteUser) return res.status(400).json({\n          success: false\n        });\n        deleteUser.images.map(async image => {\n          await Image.findByIdAndRemove(image._id);\n        });\n        res.status(200).json({\n          success: true,\n          data: {}\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        success: false\n      });\n      break;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}